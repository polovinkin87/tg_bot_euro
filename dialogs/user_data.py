from typing import Any

from aiogram import Router, F, types
from aiogram.enums import ContentType
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram_dialog import Dialog, DialogManager, StartMode, Window
from aiogram_dialog.widgets.input import ManagedTextInput, MessageInput, TextInput
from aiogram_dialog.widgets.kbd import RequestContact
from aiogram_dialog.widgets.markup.reply_keyboard import ReplyKeyboardFactory
from aiogram_dialog.widgets.text import Const
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_add_user
from filters.chat_types import UserAuth
from kbds.inline import MenuCallbackData

dialogs_router = Router()
dialogs_router.callback_query.filter(UserAuth())


class UserSG(StatesGroup):
    first_name = State()
    last_name = State()
    phone = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –æ—Ç 3 –¥–æ 120 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
def name_check(text: Any) -> str:
    if all(not ch.isdigit() for ch in text) and 3 <= len(text) <= 120:
        return text
    raise ValueError


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
async def correct_first_name_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        text: str) -> None:
    dialog_manager.dialog_data.update(first_name=text)
    await dialog_manager.next()


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏
async def error_first_name_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        error: ValueError):
    await message.answer(
        text='–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    )


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é
async def correct_last_name_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        text: str) -> None:
    dialog_manager.dialog_data.update(last_name=text)
    await dialog_manager.next()


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–∞–º–∏–ª–∏–∏
async def error_last_name_handler(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        error: ValueError):
    await message.answer(
        text='–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    )


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–æ–æ–±—â–µ –Ω–µ —Ç–µ–∫—Å—Ç
async def no_text(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    print(type(widget))
    await message.answer(text='–¢—ã –≤–≤–µ–ª –≤–æ–æ–±—â–µ –Ω–µ —Ç–µ–∫—Å—Ç!')


async def check_phone(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    if message.from_user.id == message.contact.user_id:
        dialog_manager.dialog_data.update(phone=message.contact.phone_number, user_id=message.from_user.id)
        await orm_add_user(dialog_manager.middleware_data['session'], dialog_manager.dialog_data)
        await dialog_manager.done()
        await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã üëç')


start_dialog = Dialog(
    Window(
        Const(text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ –æ—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ üëá'
                   '\n\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è'),
        TextInput(
            id='first_name_input',
            type_factory=name_check,
            on_success=correct_first_name_handler,
            on_error=error_first_name_handler,
        ),
        MessageInput(
            func=no_text,
            content_types=ContentType.ANY
        ),
        state=UserSG.first_name,
    ),
    Window(
        Const(text='–û–∫! –í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é'),
        TextInput(
            id='last_name_input',
            type_factory=name_check,
            on_success=correct_last_name_handler,
            on_error=error_last_name_handler,
        ),
        MessageInput(
            func=no_text,
            content_types=ContentType.ANY
        ),
        state=UserSG.last_name,
    ),
    Window(
        Const(text='–°—É–ø–µ—Ä! –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá'),
        RequestContact(Const("üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")),
        MessageInput(
            func=check_phone,
            content_types=ContentType.CONTACT
        ),
        markup_factory=ReplyKeyboardFactory(
            input_field_placeholder=Const('–°–æ–æ–±—â–µ–Ω–∏–µ'),
            resize_keyboard=True,
        ),
        state=UserSG.phone
    )
)


# –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dialogs_router.callback_query(MenuCallbackData.filter(F.menu_name == 'my_forecasts'))
async def command_start_process(callback: types.CallbackQuery, callback_data: MenuCallbackData,
                                dialog_manager: DialogManager, session: AsyncSession):
    await dialog_manager.start(state=UserSG.first_name, mode=StartMode.RESET_STACK)
